"""
Loads passwords and other attributes from HTML reports generated by passware


"""
# Formatted with Black

# Import functions
import argparse
import json
from pprint import pprint
import pandas as pd

# ------------ Setup ------------------------------------------------------------------

debug = False


__author__ = "facelessg00n"
__description__ = "Extracts passwords and other attributes from passware reports"


# ------------ Load in data -----------------------------------------------------------

### Load sample data
inFile = "data.json"

# Load JSON from input file
with open(inFile) as f:
    data = json.load(f)

# ------------- Classes ---------------------------------------------------------------

# Initiate Class to hold password objects
class PasswordObject:
    def __init__(self, pWord):

        # Success Indicator
        self.success = pWord["passwordsFound"]
        # Name of fracked File
        self.fileName = pWord["report"]["protectionContainers"][0]["source"][0][
            "filename"
        ]
        # MD5 of Cracked file
        self.fileHash = pWord["report"]["protectionContainers"][0]["source"][0]["md5"]
        # Recovered Password
        self.recoveredPassword = pWord["report"]["protectionContainers"][0][
            "protectionItems"
        ][0]["password"]["value"]
        #  Format of Protector i.e Rar3.x
        self.protectorFormat = pWord["report"]["protectionContainers"][0]["protection"][
            "format"
        ]["id"]
        # Encryption type of protector
        self.encType = pWord["report"]["protectionContainers"][0]["protection"][
            "flags"
        ][2]["id"]

    # Returns values as a dictionary
    def as_dict(self):
        return {
            "Success": self.success,
            "File_Name": self.fileName,
            "Password": self.recoveredPassword,
        }


# Iterate over JSON data and build up class objects -----------------------------------
objectList = []
for input_key1 in data.keys():
    # print(input_key1)
    class1 = PasswordObject(data[input_key1])
    objectList.append(class1)

if debug:
    for x in objectList:
        pprint(x.__dict__)

# Make a dataframe, just because.
df = pd.DataFrame([x.as_dict() for x in objectList])
print(df)

""" 
parser = argparse.ArgumentParser(
    description=__description__, epilog="Developed by {}".format(__author__)
)

parser.add_argument("FILE_PATH", help="Input filename")
args = parser.parse_args()
file_path = args.FILE_PATH
 """

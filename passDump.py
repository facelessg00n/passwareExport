"""
Loads passwords and other attributes from HTML reports generated by passware

Formatted with Black

"""

# Import functions
import argparse
import json
from pprint import pprint
import pandas as pd
import re

# ------------ Setup ------------------------------------------------------------------

debug = False


__author__ = "facelessg00n"
__description__ = "Extracts passwords and other attributes from passware reports"

### Regex to extract JSON from the end of the HTML file.

JSON_reg = re.compile(
    r"(?s)(?<=(\<\!-- (raw reports and clues in JSON format\n))).*(}\n--\>)"
)
# Regex to extract reports portion from JSON
PWD_reg = re.compile(r"(?s)(?<=(Reports:\n)).*(?=(\n--\>))")

# ------------ Load in data -----------------------------------------------------------

input_file = "report.html"
f = open(input_file, "r")
input_data = f.read()
f.close()

json_data = re.search(JSON_reg, input_data)
passdata_json = re.search(PWD_reg, json_data[0])
if debug:
    print(passdata_json[0])
    with open("debug_data.json", "w") as f:
        f.write(str(passdata_json[0]))

data = json.loads(passdata_json[0])

# ------------- Classes ---------------------------------------------------------------

# Initiate Class to hold password objects


class PasswordObject:
    def __init__(self, pWord):

        # Success Indicator
        self.success = pWord["passwordsFound"]

        # Name of cracked File
        self.fileName = pWord["report"]["protectionContainers"][0]["source"][0][
            "filename"
        ]
        # MD5 of Cracked file
        self.fileHash = pWord["report"]["protectionContainers"][0]["source"][0]["md5"]

        # Recovered Password
        try:
            self.recoveredPassword = pWord["report"]["protectionContainers"][0][
                "protectionItems"
            ][0]["password"]["value"]
        except:
            self.recoveredPassword = None
            pass

        #  Format of Protector i.e Rar3.x
        self.protectorFormat = pWord["report"]["protectionContainers"][0]["protection"][
            "format"
        ]["id"].split(":")[1]

        # Encryption type of protector
        try:
            self.encType = pWord["report"]["protectionContainers"][0]["protection"][
                "flags"
            ][2]["id"].split(":")[1]
        except:
            self.encType = None

        # Returns values as a dictionary

    def as_dict(self):
        return {
            "Success": self.success,
            "Protector_format": self.protectorFormat,
            "Encryption type": self.encType,
            "File_Name": self.fileName,
            "Password": self.recoveredPassword,
            "md5": self.fileHash,
        }


# -----Iterate over JSON data and build up class objects ------------------------------
objectList = []
for input_key1 in data.keys():
    # print(input_key1)
    class1 = PasswordObject(data[input_key1])
    objectList.append(class1)

if debug:
    for x in objectList:
        pprint(x.__dict__)

# Make a dataframe, just because.
df = pd.DataFrame([x.as_dict() for x in objectList])
print(df)

df.to_csv("cracked.csv")

""" 
parser = argparse.ArgumentParser(
    description=__description__, epilog="Developed by {}".format(__author__)
)

parser.add_argument("FILE_PATH", help="Input filename")
args = parser.parse_args()
file_path = args.FILE_PATH
 """
